set shell=fish
set number

" Install plug if it doesn't exist
if empty(glob('~/.vim/autoload/plug.vim'))
    let plugVersion = '0.10.0'
    let plugChecksum = 'c91f91c7e56578ab7331c784b4bc764eccef774f'

    let plugDownloadUrl = 'https://raw.githubusercontent.com/junegunn/vim-plug/' . plugVersion . '/plug.vim'
    let remoteChecksum = systemlist('curl -s ' . plugDownloadUrl . ' | shasum | awk ''{print $1}''')[0]

    if remoteChecksum != plugChecksum
        echoerr 'Plug installation failed, checksums don''t match!'
    else
        echo 'Downloading plug...'
        silent execute '!curl -sfLo ~/.vim/autoload/plug.vim --create-dirs' plugDownloadUrl
        autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
    endif
endif

" Keymaps
" map <C-p> :NERDTreeToggle<CR>
"
call plug#begin()

" Language specific
Plug 'w0rp/ale'
Plug 'pearofducks/ansible-vim'
Plug 'sudar/vim-arduino-syntax'
Plug 'plasticboy/vim-markdown'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'fatih/vim-go'
Plug 'fatih/vim-hclfmt'
Plug 'michaeljsmith/vim-indent-object'
Plug 'lervag/vimtex'
Plug 'xuhdev/vim-latex-live-preview'
Plug 'saltstack/salt-vim'
Plug 'vim-python/python-syntax'
Plug 'ambv/black'
" Colorscheme
Plug 'junegunn/seoul256.vim'
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/base16'
Plug 'morhetz/gruvbox'
" Else
Plug 'junegunn/vim-easy-align'
Plug 'bling/vim-airline'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on' : 'NERDTreeToggle'}
Plug 'jiangmiao/auto-pairs'
Plug 'chrisbra/Colorizer'
Plug 'junegunn/goyo.vim'
Plug 'amix/open_file_under_cursor.vim'
Plug 'KabbAmine/vCoolor.vim'
Plug 'tpope/vim-commentary'
Plug 'terryma/vim-expand-region'
Plug 'tpope/vim-fugitive'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-sensible'

call plug#end()

colorscheme seoul256

" Configure Python Syntax
let g:python_highlight_all = 1
let g:python_highlight_file_headers_as_comment = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
autocmd BufWritePre *.py execute ':Black'
nnoremap <F4> :NERDTreeToggle <cr>
